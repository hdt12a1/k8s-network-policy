# Example 1: Deny all ingress traffic to a namespace
# Purpose: This policy creates a default deny rule for all incoming traffic
# Use case: Starting point for zero-trust security model
# Note: This will block ALL incoming traffic unless explicitly allowed by other policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: production
spec:
  podSelector: {}  # Empty selector means select all pods in the namespace
  policyTypes:
  - Ingress      # Only applying to incoming traffic

---
# Example 2: Allow traffic only from specific namespace
# Purpose: Enable cross-namespace communication with specific restrictions
# Use case: When you want to allow traffic only from development namespace to specific pods
# Note: This requires the source namespace to have the label environment: development
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-dev-namespace
  namespace: production
spec:
  podSelector:           # This policy applies to pods with label app: web
    matchLabels:
      app: web
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:    # Select source namespace based on labels
        matchLabels:
          environment: development

---
# Example 3: Allow specific ports from multiple sources
# Purpose: Define granular access control for different types of clients
# Use case: Microservices architecture where multiple services need different types of access
# Note: This allows both frontend and monitoring tools to access the API service
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: multi-port-multi-source
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: api          # Applies to API pods
  policyTypes:
  - Ingress
  ingress:
  - from:              # Multiple source pods can access
    - podSelector:
        matchLabels:
          role: frontend    # Allow frontend pods
    - podSelector:
        matchLabels:
          role: monitoring  # Allow monitoring pods
    ports:             # Define allowed ports
    - protocol: TCP
      port: 8080      # Main API port
    - protocol: TCP
      port: 443       # HTTPS port

---
# Example 4: Allow egress traffic to specific external IP ranges
# Purpose: Control outbound traffic to external services
# Use case: When pods need to access specific external services or APIs
# Note: Includes both allowed CIDR blocks and specific IP exceptions
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-egress
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: backend     # Applies to backend pods
  policyTypes:
  - Egress            # Controls outgoing traffic
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24           # Allow traffic to this IP range
        except:
        - 10.0.0.12/32              # Except this specific IP
    ports:
    - protocol: TCP
      port: 443                     # HTTPS traffic only

---
# Example 5: Allow traffic from specific pods and namespaces with multiple conditions
# Purpose: Implement complex access control with both namespace and pod-level restrictions
# Use case: Database access control in a multi-tier application
# Note: Combines both ingress and egress rules for complete traffic control
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: complex-policy
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: database    # Applies to database pods
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:    # Must be in production namespace
        matchLabels:
          environment: production
      podSelector:          # AND must be a backend pod
        matchLabels:
          role: backend
    ports:
    - protocol: TCP
      port: 5432           # PostgreSQL port
  egress:
  - to:
    - namespaceSelector:    # Allow sending metrics to monitoring
        matchLabels:
          environment: monitoring
    ports:
    - protocol: TCP
      port: 9090           # Prometheus port

---
# Example 6: Allow traffic based on multiple label selectors
# Purpose: Demonstrate advanced label selection techniques
# Use case: When you need complex pod selection criteria
# Note: Uses matchExpressions for more flexible label matching
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: multi-label-selector
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: web
      tier: frontend    # Pods must have both labels
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchExpressions:   # More flexible than matchLabels
        - key: role
          operator: In     # Allows multiple values
          values: ["monitoring", "logging"]
    ports:
    - protocol: TCP
      port: 80

---
# Example 7: Allow all ingress within namespace
# Purpose: Enable unrestricted communication within a namespace
# Use case: Development environments or tightly coupled microservices
# Note: This is less restrictive but still maintains namespace isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: production
spec:
  podSelector: {}      # Applies to all pods in namespace
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector: {}  # Allow from all pods in same namespace

---
# Example 8: Allow specific external traffic and internal pods
# Purpose: Combine external and internal access control
# Use case: Public-facing services that also need internal communication
# Note: Shows how to mix ipBlock and podSelector rules
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-and-internal
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: web        # Applies to web pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - ipBlock:        # Allow external IPs
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24    # Blocked subnet
    - podSelector:         # Allow internal pods
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 80            # HTTP traffic

---
# Network Policy for AWS S3 Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-s3-access
  namespace: your-namespace
spec:
  podSelector:
    matchLabels:
      app: your-app  # Match your application pods
  policyTypes:
    - Egress
  egress:
    # Allow HTTPS access to S3 endpoints
    - to:
        - ipBlock:
            # S3 CIDR ranges for your AWS region
            # Replace with actual CIDR ranges for your region
            cidr: 3.5.140.0/22   # Example S3 CIDR for ap-southeast-1
      ports:
        - protocol: TCP
          port: 443    # HTTPS
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        - podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53     # DNS
        - protocol: TCP
          port: 53     # DNS

---
# Alternative Network Policy using VPC Endpoints
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-s3-vpc-endpoint
  namespace: your-namespace
spec:
  podSelector:
    matchLabels:
      app: your-app
  policyTypes:
    - Egress
  egress:
    # Allow HTTPS access to VPC Endpoint
    - to:
        - ipBlock:
            # Your VPC Endpoint CIDR
            cidr: 10.0.0.0/16    # Replace with your VPC CIDR
      ports:
        - protocol: TCP
          port: 443
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        - podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
